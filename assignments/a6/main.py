from gmpy2 import digits, invert, isqrt, isqrt_rem, is_prime, mpz, powmod, t_divmod

def ceil_sqrt(N):
    s, t = isqrt_rem(N)
    return s + 1 if t > 0 else s
# ceil_sqrt

def factor1(N):
    A = ceil_sqrt(N)
    x, t = isqrt_rem(A ** 2 - N)
    p, q = (A - x,  A + x)
    assert(t == 0 and is_prime(p) and is_prime(q) and p * q == N)
    return p, q
# factor1

def factor2(N):
    A = ceil_sqrt(N)
    A_2 = A ** 2
    while True:
        x, t = isqrt_rem(A_2 - N)
        p, q = (A - x, A + x)
        if t == 0 and is_prime(p) and is_prime(q) and p * q == N:
            return p, q
        # if
        A_2 = A_2 + 2 * A + 1 # Shortcut.
        A += 1
    # while
# factor2

def factor3(N):
    B = 2 * isqrt(6 * N) + 1
    a = 24
    b = - 10 * B
    c = B ** 2 + N
    s, t1 = isqrt_rem(b ** 2 - 4 * a * c)
    A, t2 = t_divmod(-b + s, 2 * a)
    x, t3 = isqrt_rem(A ** 2 - N)
    p, q = (A - x, A + x)
    assert(t1 == 0 and t2 == 0 and t3 == 0)
    assert(is_prime(p) and is_prime(q) and p * q == N)
    return p, q
# factor3

def decrypt(ct, N, p, q, e):
    phi_N = (p - 1) * (q - 1)
    d = invert(e, phi_N)
    pt = powmod(ct, d, N)
    pt = digits(pt, 16)
    pt = '00'.join(pt.split('00')[1:])
    return pt.decode('hex')
# decrypt

def main():
    N = mpz(
        '17976931348623159077293051907890247336179769789423065727343008115 \
        77326758055056206869853794492129829595855013875371640157101398586 \
        47833778606925583497541085196591615128057575940752635007475935288 \
        71082364994994077189561705436114947486504671101510156394068052754 \
        0071584560878577663743040086340742855278549092581'
    )
    p, q = factor1(N)
    print p # "13407807929942597099574024998205846127479365820592393377723561443721764030073662768891111614362326998675040546094339320838419523375986027530441562135724301"
    print factor2(mpz(
        '6484558428080716696628242653467722787263437207069762630604390703787 \
        9730861808111646271401527606141756919558732184025452065542490671989 \
        2428844841839353281972988531310511738648965962582821502504990264452 \
        1008852816733037111422964210278402893076574586452336833570778346897 \
        15838646088239640236866252211790085787877'
    ))[0] # "25464796146996183438008816563973942229341454268524157846328581927885777969985222835143851073249573454107384461557193173304497244814071505790566593206419759"
    print factor3(mpz(
        '72006226374735042527956443552558373833808445147399984182665305798191 \
        63556901883377904234086641876639384851752649940178970835240791356868 \
        77441155132015188279331812309091996246361896836573643119174094961348 \
        52463970788523879939683923036467667022162701835329944324119217381272 \
        9276147530748597302192751375739387929'
    ))[0] # "21909849592475533092273988531583955898982176093344929030099423584127212078126150044721102570957812665127475051465088833555993294644190955293613411658629209"
    ct = mpz(
        '22096451867410381776306561134883418017410069787892831071731839143676 \
        13560012053800428232965047350942434394621975151225646583996794288946 \
        07645420405815647489880137348641204523252293201764879166664029975091 \
        88729971690526083222067771600019329260870009579993724077458967773697 \
        817571267229951148662959627934791540'
    )
    e = 65537
    print decrypt(ct, N, p, q, e) # "Factoring lets us break RSA."
# main

if __name__ == '__main__':
    main()
# if